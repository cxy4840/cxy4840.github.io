<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Blog】搭建个人静态博客指南及避坑</title>
    <link href="/2023/03/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97%E5%8F%8A%E9%81%BF%E5%9D%91/"/>
    <url>/2023/03/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97%E5%8F%8A%E9%81%BF%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>近期，看到B站上<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.1007.tianma.3-3-7.click&vd_source=ec9d8b7bb49c5fd86838483496f8d6ed">超详细！0成本搭建个人网站！！【建议收藏】——小宇Boi</a>做的视频，想着我也搞一个个人静态博客，记录代码和一些思考，所以上手整了一下，两天搞下来了，有些坑需要避一避，现在记录下整个过程。</p><h2 id="一-在系统上安装git工具、Node-js和Hexo"><a href="#一-在系统上安装git工具、Node-js和Hexo" class="headerlink" title="一. 在系统上安装git工具、Node.js和Hexo"></a>一. 在系统上安装<strong>git工具</strong>、<strong>Node.js</strong>和<strong>Hexo</strong></h2><ol><li>在网页上浏览<a href="https://git-scm.com/">git官网</a>下载自己电脑对应版本的git</li><li>在终端测试一下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git -v<br></code></pre></td></tr></table></figure>如果弹出<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git version 2.24.3 (xxx Git-128)<br></code></pre></td></tr></table></figure>就是安装成功了</li><li>浏览<a href="https://nodejs.org/zh-cn/">Node.js</a>安装对应的node.js</li><li>同样测试<code>node -v </code>弹出&#96;&#96;&#96;vxx.xx&#96;&#96;就是安装成功了</li><li>浏览<a href="https://hexo.io/zh-cn/">Hexo</a>根据网站主页的提示在终端中键入.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g <span class="hljs-comment">#使用npm下载hexo的整体，如果没有npm还需要下载npm</span><br>hexo init xxx.github.io <span class="hljs-comment"># 使用hexo这个软件来初始化xxx.github.io，在这个动作之前要先创建一个hexo文件夹然后再使用这个命令 </span><br></code></pre></td></tr></table></figure><em><em>这里要强调为什么要起这个名字，是后面要在Github上创建一个同名的仓库，用来存储推送的页面的文件，最好是一样的，后期才不容易出现问题</em></em><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> xxx.github.io <span class="hljs-comment">#进入xxx.github.io文件夹</span><br>npm install <br>hexo server <span class="hljs-comment">#这一步开启hexo服务只是测试hexo安装成功了没，OK了的话就打开浏览器输入localhost:4000就会出现hello界面</span><br></code></pre></td></tr></table></figure>OK了的话就打开浏览器输入localhost:4000就会出现hello界面<br><img src="/2023/03/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97%E5%8F%8A%E9%81%BF%E5%9D%91/start.jpg" alt="startPage"></li></ol><h2 id="二-托管代码到GitHub上"><a href="#二-托管代码到GitHub上" class="headerlink" title="二. 托管代码到GitHub上"></a>二. 托管代码到GitHub上</h2><p>其实Gitee也能托管静态的网页，这个在B站上<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.1007.tianma.3-3-7.click&vd_source=ec9d8b7bb49c5fd86838483496f8d6ed">超详细！0成本搭建个人网站！！【建议收藏】——小宇Boi</a>里面有所体现，这里我介绍如何托管到GitHub上，以及一些需要避开的坑。</p><ol><li>注册GitHub（这里就不多做解释了）</li><li>生成SSH密钥，参考<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a><br>可以方便后期每次推送代码</li><li>创建xxx.github.io仓库，在github上创建名为xxx.github.io的仓库，并设置为Public使得整个仓库可以被外界访问，因为这个仓库是可以访问的，所以建议大家最好使用Hexo的推送功能 <code>Hexo deploy</code>就不用担心源代码泄露。<br><img src="/2023/03/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97%E5%8F%8A%E9%81%BF%E5%9D%91/%E4%BB%93%E5%BA%93.jpg" alt="创建仓库">到这一步仓库建设完毕了，我们可以选择直接把在本地写好的文件推入github仓库，参考<a href="https://hexo.io/zh-cn/docs/github-pages">Hexo官网Github Pages部署Hexo</a>，也可以考虑只推送页面，这样源代码就不会推送到github仓库中,参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署</a>。</li><li>安装 hexo-deployer-git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure></li><li>在<code>_config.yml</code>文件中加入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/xxx/xxx.github.io<br>  <span class="hljs-comment"># example, https://github.com/hexojs/hexojs.github.io</span><br>  branch: main<br></code></pre></td></tr></table></figure></li><li>在command里面键入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure>注意<code>hexo deploy </code>会需要我们键入github账户和密码，个人建议是使用github的token功能，参考，然后在输入github账号后输入token，特别要小心，不要用键盘上的ctrl+c复制粘贴token很可能会失败，最好是用鼠标右键复制粘贴，这个就是笔者之前说过需要避开的坑。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【PyQt5-多线程】写PyQt5小界面的多线程错误示范和正确示范</title>
    <link href="/2023/03/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="【PyQt5-多线程】写PyQt5小界面的多线程错误示范和正确示范"><a href="#【PyQt5-多线程】写PyQt5小界面的多线程错误示范和正确示范" class="headerlink" title="【PyQt5-多线程】写PyQt5小界面的多线程错误示范和正确示范"></a>【PyQt5-多线程】写PyQt5小界面的多线程错误示范和正确示范</h1><p>最近打算把写好的整个系统封装成一个QT的GUI界面，发现需要用多线程才能满足我同时打开多个ros进程以及VirtualBox软件的需求，因此下面给出错误示范和正确示范：</p><h2 id="1-错误示范，把需要多线程进行的函数放在RunThread-函数外面："><a href="#1-错误示范，把需要多线程进行的函数放在RunThread-函数外面：" class="headerlink" title="1. 错误示范，把需要多线程进行的函数放在RunThread()函数外面："></a>1. 错误示范，把需要多线程进行的函数放在RunThread()函数外面：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">PushButton</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__author__ = <span class="hljs-string">&#x27;Xiaoyu Cai&#x27;</span><br><br><span class="hljs-keyword">import</span> sys,os,time<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_time</span>(<span class="hljs-params">fuc1</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;装饰器, 测量阻塞计时&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self</span>):<br>        start_time = time.time()<br>        res = fuc1(self)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span> (end_time-start_time)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> train<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TabDemo</span>(QTabWidget,QThread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TabDemo, self).__init__(parent)<br>        self.setGeometry(<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>,<span class="hljs-number">200</span>)<br>        self.tab1 = QWidget()<br>        self.tab2 = QWidget()<br>        self.tab3 = QWidget()<br>        self.addTab(self.tab1,<span class="hljs-string">&#x27;启动力反馈器&#x27;</span>)<br>        self.addTab(self.tab2,<span class="hljs-string">&#x27;启动机器人&#x27;</span>)<br>        self.tab1UI()<br>        self.tab2UI()<br>        <span class="hljs-comment"># self.tab3UI()</span><br>        self.setWindowTitle(<span class="hljs-string">&quot;手术机器人启动台&quot;</span>)<br>        <br>        self.show()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tab1UI</span>(<span class="hljs-params">self</span>):<br>        layout = QFormLayout()<br>        launch = QHBoxLayout()<br>        setupTouch = QPushButton(<span class="hljs-string">&quot;打开Touch_Setup&quot;</span>)<br>        launch.addWidget(setupTouch)<br>        setupTouch.clicked.connect(self.openTouchShell)<br>        roslaunchGeomagic = QPushButton(<span class="hljs-string">&quot;Roslanuch Geomagic&quot;</span>)<br>        launch.addWidget(roslaunchGeomagic)<br>        roslaunchGeomagic.clicked.connect(self.threadOpenGeomagic)<br>        layout.addRow(QLabel(<span class="hljs-string">&quot;启动台&quot;</span>), launch)<br>        <span class="hljs-comment"># layout.addRow(&quot;生日&quot;, QLineEdit())</span><br>        self.tab1.setLayout(layout)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tab2UI</span>(<span class="hljs-params">self</span>):<br>        layout = QFormLayout()<br>        layout.addRow(<span class="hljs-string">&#x27;本主机IP地址:&#x27;</span>,QLineEdit(self.get_host_ip()))<br>        layout.addRow(<span class="hljs-string">&quot;目标机器人IP地址&quot;</span>, QLineEdit())<br>        openVirtualBox = QPushButton(<span class="hljs-string">&quot;打开VirtualBox&quot;</span>)<br>        layout.addWidget(openVirtualBox)<br>        openVirtualBox.clicked.connect(self.threadVirtualBox)<br>        self.tab2.setLayout(layout)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_host_ip</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;获取本机IP地址&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>            s.connect((<span class="hljs-string">&#x27;8.8.8.8&#x27;</span>, <span class="hljs-number">80</span>))<br>            ip = s.getsockname()[<span class="hljs-number">0</span>]<br>            <span class="hljs-comment"># print(ip)</span><br>            <span class="hljs-comment"># ipaddress = str(ip)</span><br>            <span class="hljs-keyword">return</span> ip<br>        <span class="hljs-keyword">finally</span>:<br>            s.close()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openTouchShell</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;cd /home/cxy/Haptic/TouchDriver2019_2_14/bin &amp;&amp; ./Touch_Setup&quot;</span>)<br>        <span class="hljs-comment"># chmod a+x /home/xx/my.sh;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openGeomagic</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;roslaunch geomagic_control geomagic.launch&quot;</span>)<br>    <span class="hljs-comment">#错误使用了thread想用threadXXX来打开某个按键，其实是不会进入thread进程的</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threadOpenGeomagic</span>(<span class="hljs-params">self</span>):<br>        self.thread2 = RunThread()<br>        self.thread2.trigger.connect(self.openGeomagic)<br>        self.thread2.start()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threadVirtualBox</span>(<span class="hljs-params">self</span>):<br>        self.thread3 = RunThread()<br>        self.thread3.trigger.connect(self.VirtualBox)<br>        self.thread3.start()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">VirtualBox</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;virtualbox&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunThread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    trigger = pyqtSignal(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(RunThread, self).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 处理你要做的业务逻辑，这里是通过一个回调来处理数据，这里的逻辑处理写自己的方法</span><br>        <span class="hljs-comment"># wechat.start_auto(self.callback)</span><br>        <span class="hljs-comment"># self._signal.emit(msg);  可以在这里写信号焕发</span><br>        self.trigger.emit(<span class="hljs-string">&quot;ok&quot;</span>)<br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">self, msg</span>):<br>        <span class="hljs-comment"># 信号焕发，我是通过我封装类的回调来发起的</span><br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># print(get_host_ip())</span><br>    app = QApplication(sys.argv)<br>    <span class="hljs-comment"># ip = IPv4AddrLineEdit()</span><br>    <span class="hljs-comment"># ip.show()</span><br>    ex = TabDemo()<br><br>    sys.exit(app.exec_()) <br><br></code></pre></td></tr></table></figure><h2 id="2-正确示范，把需要多线程的按键或者命令放在Class-RunThread-这个类下："><a href="#2-正确示范，把需要多线程的按键或者命令放在Class-RunThread-这个类下：" class="headerlink" title="2.正确示范，把需要多线程的按键或者命令放在Class RunThread() 这个类下："></a>2.正确示范，把需要多线程的按键或者命令放在Class RunThread() 这个类下：</h2><p>受到这句话的启发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunThread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    trigger = pyqtSignal(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(RunThread, self).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 处理你要做的业务逻辑，这里是通过一个回调来处理数据，这里的逻辑处理写自己的方法</span><br>        <span class="hljs-comment"># wechat.start_auto(self.callback)</span><br>        <span class="hljs-comment"># self._signal.emit(msg);  可以在这里写信号焕发</span><br>        self.VirtualBox()<br>        self.trigger.emit(<span class="hljs-string">&quot;ok&quot;</span>)<br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>“处理你要做的业务逻辑，这里是通过一个回调来处理数据，这里的逻辑处理写自己的方法”</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">PushButton</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__author__ = <span class="hljs-string">&#x27;Xiaoyu Cai&#x27;</span><br><br><span class="hljs-keyword">import</span> sys,os,time<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socket<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tabs</span>(QTabWidget,QThread):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;这个类使用来创建一个有选项页的QT界面&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(Tabs, self).__init__(parent)<br>        self.setGeometry(<span class="hljs-number">200</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>,<span class="hljs-number">200</span>)<br>        self.tab1 = QWidget()<br>        self.tab2 = QWidget()<br>        self.tab3 = QWidget()<br>        self.addTab(self.tab1,<span class="hljs-string">&#x27;启动力反馈器&#x27;</span>)<br>        self.addTab(self.tab2,<span class="hljs-string">&#x27;启动机器人&#x27;</span>)<br>        self.tab1UI()<br>        self.tab2UI()<br>        <span class="hljs-comment"># self.tab3UI()</span><br>        self.setWindowTitle(<span class="hljs-string">&quot;手术机器人启动台&quot;</span>)<br>        <br>        self.show()<br>    <span class="hljs-comment">#创建第一个选项页</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tab1UI</span>(<span class="hljs-params">self</span>):<br>        layout = QFormLayout()<br>        launch = QHBoxLayout()<br><br>        <span class="hljs-comment">#Touch的按键</span><br>        setupTouch = QPushButton(<span class="hljs-string">&quot;Touch_Setup&quot;</span>)<br>        launch.addWidget(setupTouch)<br>        <span class="hljs-comment">#关联打开Touch多线程函数</span><br>        setupTouch.clicked.connect(self.openTouchShell)<br><br>        <span class="hljs-comment">#Geomagic的按键</span><br>        roslaunchGeomagic = QPushButton(<span class="hljs-string">&quot;Roslanuch Geomagic&quot;</span>)<br>        launch.addWidget(roslaunchGeomagic)<br>        <span class="hljs-comment">#关联打开Geomagic多线程函数</span><br>        roslaunchGeomagic.clicked.connect(self.openGeomagic)<br><br>        layout.addRow(QLabel(<span class="hljs-string">&quot;启动台&quot;</span>), launch)<br>        self.tab1.setLayout(layout)<br><br>    <span class="hljs-comment">#创建第二个选项页</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tab2UI</span>(<span class="hljs-params">self</span>):<br>        targetIPAdress = <span class="hljs-built_in">str</span><br>        layout = QFormLayout()<br>        layout.addRow(<span class="hljs-string">&#x27;本主机IP地址:&#x27;</span>,QLineEdit(self.get_host_ip()))<br>        <span class="hljs-comment"># 输入目标机器人IP地址</span><br>        layout.addRow(<span class="hljs-string">&quot;目标机器人IP地址&quot;</span>, QLineEdit(targetIPAdress))<br>        <br>        <span class="hljs-comment">#VirtualBox按键</span><br>        openVirtualBox = QPushButton(<span class="hljs-string">&quot;打开VirtualBox&quot;</span>)<br>        layout.addWidget(openVirtualBox)<br>        <span class="hljs-comment">#关联VirtualBox多线程函数</span><br>        openVirtualBox.clicked.connect(self.virtualBox)<br>        self.tab2.setLayout(layout)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_host_ip</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;获取本机IP地址&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>            s.connect((<span class="hljs-string">&#x27;8.8.8.8&#x27;</span>, <span class="hljs-number">80</span>))<br>            ip = s.getsockname()[<span class="hljs-number">0</span>]<br>            <span class="hljs-comment"># print(ip)</span><br>            <span class="hljs-comment"># ipaddress = str(ip)</span><br>            <span class="hljs-keyword">return</span> ip<br>        <span class="hljs-keyword">finally</span>:<br>            s.close()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openTouchShell</span>(<span class="hljs-params">self</span>):<br>        self.thread = TouchThread()<br>        self.thread.start()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openGeomagic</span>(<span class="hljs-params">self</span>):<br>        self.thread2 = GeomagicThread()<br>        self.thread2.start()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">virtualBox</span>(<span class="hljs-params">self</span>):<br>        self.thread3 = VirtualBoxThread()<br>        self.thread3.start()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TouchThread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    trigger = pyqtSignal(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TouchThread, self).__init__()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self.openTouchShell()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openTouchShell</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;cd /home/cxy/Haptic/TouchDriver2019_2_14/bin &amp;&amp; ./Touch_Setup&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">self, msg</span>):<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeomagicThread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    trigger = pyqtSignal(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(GeomagicThread, self).__init__()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self.openGeomagic()<br>        self.trigger.emit(<span class="hljs-string">&quot;ok&quot;</span>)<br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">openGeomagic</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;roslaunch geomagic_control geomagic.launch&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">self, msg</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VirtualBoxThread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    trigger = pyqtSignal(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(VirtualBoxThread, self).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 处理你要做的业务逻辑，这里是通过一个回调来处理数据，这里的逻辑处理写自己的方法</span><br>        <span class="hljs-comment"># wechat.start_auto(self.callback)</span><br>        <span class="hljs-comment"># self._signal.emit(msg);  可以在这里写信号焕发</span><br>        self.VirtualBox()<br>        self.trigger.emit(<span class="hljs-string">&quot;ok&quot;</span>)<br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">VirtualBox</span>(<span class="hljs-params">self</span>):<br>        os.system(<span class="hljs-string">&quot;virtualbox&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">self, msg</span>):<br>        <span class="hljs-comment"># 信号焕发，我是通过我封装类的回调来发起的</span><br>        <span class="hljs-comment"># self._signal.emit(msg)</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># print(get_host_ip())</span><br>    app = QApplication(sys.argv)<br>    <span class="hljs-comment"># ip = IPv4AddrLineEdit()</span><br>    <span class="hljs-comment"># ip.show()</span><br>    ex = TabDemo()<br><br>    sys.exit(app.exec_()) <br><br></code></pre></td></tr></table></figure><p>通过以上的代码就可以在一个GUI界面里完成多个线程的任务，而不会使得GUI界面进入阻塞卡死状态</p>]]></content>
    
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【WSL2 学习日志】实现Ubuntu20.04  ROS2_foxy 在win11下的WSL2虚拟化</title>
    <link href="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <url>/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一-为什么使用WSL2虚拟而不是VMware-或者-Orical-Virtualbox"><a href="#一-为什么使用WSL2虚拟而不是VMware-或者-Orical-Virtualbox" class="headerlink" title="一. 为什么使用WSL2虚拟而不是VMware 或者 Orical Virtualbox"></a>一. 为什么使用WSL2虚拟而不是VMware 或者 Orical Virtualbox</h1><ol><li>因为这个VMware不够轻量化</li><li>Vmware无法调用显卡配置，而在我的项目中需要用独立显卡来渲染gazebo</li></ol><h1 id="二-如何实现"><a href="#二-如何实现" class="headerlink" title="二. 如何实现"></a>二. 如何实现</h1><h2 id="1-硬件配置要求"><a href="#1-硬件配置要求" class="headerlink" title="1. 硬件配置要求"></a>1. 硬件配置要求</h2><blockquote><p>windows11 或者 windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）</p></blockquote><h2 id="2-学习教程"><a href="#2-学习教程" class="headerlink" title="2. 学习教程"></a>2. 学习教程</h2><blockquote><ol><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">Microsoft Learn 官方学习WSL教程</a></li><li><a href="https://blog.csdn.net/sandonz/article/details/120854876">sandonz 关于【WSL Ubuntu20.04 与其图形界面安装配置】</a> 应用该教程可以实现windows自带的远程桌面连接服务，虽然较为卡顿但是效果显著(这里注意一下 该教程的换源对于20.04来说特别好用，一定要及时更换该教程里的源，在我之前使用ubuntu22.04上就是换源问题一直困扰)</li><li><a href="https://blog.csdn.net/qq_41460654/article/details/118026986">董酷酷_Windows电脑如何开启CPU虚拟化</a></li></ol></blockquote><h2 id="3-实践过程"><a href="#3-实践过程" class="headerlink" title="3.实践过程"></a>3.实践过程</h2><h3 id="3-0-基础设置"><a href="#3-0-基础设置" class="headerlink" title="3.0 基础设置"></a>3.0 基础设置</h3><blockquote><p>在“开始”中搜索 启用或关闭windows功能<br><img src="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/%E5%90%AF%E7%94%A8%E6%88%96%E5%85%B3%E9%97%ADwindows%E5%8A%9F%E8%83%BD.png" alt="启用或关闭windows功能"><br>将以下涉及到的选项全都点击选中，要注意Hyper-V可能无法全部选中，要在BIOS中修改开启CPU虚拟化功能，具体操作看<a href="https://blog.csdn.net/qq_41460654/article/details/118026986">董酷酷_Windows电脑如何开启CPU虚拟化</a>开启Hyper-V这一步很重要，如果不开启的话 后续就无法升级WSL2，会导致很多bug而且ROS2中的rviz2以及rqt_graph等就无法在windows界面上开启。（当然了，届时必须下载python Qt-5才可以打开这些界面)<img src="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B3%E5%8F%B0.png" alt="虚拟机平台"><img src="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/%E9%80%82%E7%94%A8Linux%E7%9A%84Windows%E5%AD%90%E7%B3%BB%E7%BB%9F.png" alt="适用Linux的Windows子系统"><br><img src="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/Windows%E8%99%9A%E6%8B%9F%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0.png" alt="Windows虚拟程序监控平台"><br><img src="/2023/02/07/%E3%80%90WSL2%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E3%80%91%E5%AE%9E%E7%8E%B0Ubuntu20.04%20ROS2(foxy)%E5%9C%A8win1%E4%B8%8B%E7%9A%84WSL2%E8%99%9A%E6%8B%9F%E5%8C%96/Hyper-V.png" alt="Hyper-V"></p></blockquote><h3 id="3-1-下载安装windows-subsystem-for-Linux-wsl-和-ubuntu-20-04"><a href="#3-1-下载安装windows-subsystem-for-Linux-wsl-和-ubuntu-20-04" class="headerlink" title="3.1 下载安装windows subsystem for Linux (wsl) 和 ubuntu 20.04"></a>3.1 下载安装windows subsystem for Linux (wsl) 和 ubuntu 20.04</h3><h4 id="3-1-1"><a href="#3-1-1" class="headerlink" title="3.1.1"></a>3.1.1</h4><p>直接在PowerShell或者CMD里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --intsall<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list --online <span class="hljs-comment">#查看可下载的Linux版本</span><br>wsl --install -d Ubuntu-xx.xx <span class="hljs-comment">#下载对应需要的Ubuntu版本，我选择熟悉的Ubuntu-22.04</span><br></code></pre></td></tr></table></figure><p>也可以在应用商店里直接下载Ubuntu<br>下载完打开<code>Ubuntu20.04 </code>可能会出现一些错误，这个时候直接把<code>wsl</code>换成1，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --set-version 1<br></code></pre></td></tr></table></figure><p>，再打开<code>Ubuntu20.04</code>就会出现等待几分钟（Wait for a few minutes）<br>等到出现要求我们输入账号密码的时候就证明配置好了，相比起双系统 这种安装Ubuntu的方式真的快了很多倍。</p><h3 id="3-2-将WSL更换为WSL2"><a href="#3-2-将WSL更换为WSL2" class="headerlink" title="3.2 将WSL更换为WSL2"></a>3.2 将WSL更换为WSL2</h3><blockquote><p>PS:如果不打开Hpyer-V的所有选项，这一步是不能完成的，会导致以下几个问题：</p><ol><li>无法在<code>windows</code>界面上看到<code>rqt_graph</code>或者<code>rviz2</code>等可视化界面</li><li>ROS的不同terminal之间的联系好像也断开了，本人尝试过在一个windows terminal标签页里打开<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-built_in">source</span> /opt/ros/foxy/setup.bash<br>&gt;ros2 run demo_nodes_py talker<br></code></pre></td></tr></table></figure>在另外一个标签页里打开<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-built_in">source</span> /opt/ros/foxy/setup.bash<br>&gt;ros2 run demo_nodes_py listener<br></code></pre></td></tr></table></figure>他们两个节点之间是没有通信的，而且<code>rqt_graph</code>也没有节点图<br>很简单，在打开Hyper-V后在<code>windows terminal</code>里改</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl -l -v<br>wsl --set-default-version 2<br><span class="hljs-comment">#或者针对某个Linux</span><br>wsl --set-version Ubuntu-xx.xx 2<br></code></pre></td></tr></table></figure><h3 id="3-3-修改WSL2占用的内存，可以降低WSL出现蓝屏的可能"><a href="#3-3-修改WSL2占用的内存，可以降低WSL出现蓝屏的可能" class="headerlink" title="3.3 修改WSL2占用的内存，可以降低WSL出现蓝屏的可能"></a>3.3 修改WSL2占用的内存，可以降低WSL出现蓝屏的可能</h3><blockquote><p>参考<a href="https://blog.csdn.net/lian740930980/article/details/127638402#:~:text=%E8%A7%A3%E5%86%B3WSL2%E4%B8%ADVmmem%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%A7%E9%97%AE%E9%A2%98%20%E6%95%99%E7%A8%8B%20%E8%B5%B7%E5%9B%A0%20Windows%20%E7%9A%84linux%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%20%E5%8D%A0%E7%94%A8%20%E5%8F%AF%E5%88%B0%E6%9C%AC%E6%9C%BA%E5%99%A8%E7%9A%8480%25%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BF%85%E9%A1%BB%E9%99%90%E5%88%B6%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E6%80%A7%E8%83%BD%E6%9D%A5%E8%BE%BE%E5%88%B0%E4%BC%98%E5%8C%96%E7%9B%AE%E7%9A%84%20%E4%BC%98%E5%8C%96,%E5%86%85%E5%AD%98%20%E4%B8%8A%E9%99%90%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E9%99%90%E5%88%B6%E6%9C%80%E5%A4%A72gb%EF%BC%8C%E5%8F%AF%E6%A0%B9%E6%8D%AE%E8%87%AA%E8%BA%AB%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE%20%5B%20wsl2%20%5D%20memory%3D2GB%20swap%3D0%20localhostForwarding%3Dtrue">甜甜的初夏_解决WSL2中Vmmem内存占用过大问题</a></p></blockquote><h3 id="3-4-安装ROS-foxy"><a href="#3-4-安装ROS-foxy" class="headerlink" title="3.4 安装ROS foxy"></a>3.4 安装ROS foxy</h3><blockquote><p>说在前头：由于我们在前面的工作中把源换好了接下来可以直接安装ROS了<br>最标准的安装方法直接参照ROS官网的安装方法<a href="https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html">ROS foxy Installation</a><br>安装完毕后就可以尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-built_in">source</span> /opt/ros/foxy/setup.bash<br>&gt;ros2 run demo_nodes_py talker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-built_in">source</span> /opt/ros/foxy/setup.bash<br>&gt;ros2 run demo_nodes_py listener<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>WSL/WSL2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS学习记录】（五）Win版ROS/Noetic 如何添加必要的依赖(rosdep)</title>
    <link href="/2022/08/27/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2022/08/27/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>近期为了使得更多的设备可以连入ROS，开始转向Windows平台的ROS，遇到一些问题</p><ol><li>无法编译问题，如何解决，参考<a href="https://blog.csdn.net/qq_36651243/article/details/115689930">CSDN:离歌漠</a>,的文章，下载Ninja到系统变量中</li><li>编译出现依赖项无法下载的问题，将在下述文章中详细阐述</li></ol></blockquote><h3 id="编译出现依赖项无法下载的问题"><a href="#编译出现依赖项无法下载的问题" class="headerlink" title="编译出现依赖项无法下载的问题"></a>编译出现依赖项无法下载的问题</h3><p>我们在使用ROS编译的过程中可能会出现这样的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Could not find a package configuration file provided by<br> <span class="hljs-string">&quot;industrial_robot_status_interface&quot;</span> with any of the following names:<br></code></pre></td></tr></table></figure><p><img src="/2022/08/27/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%94%EF%BC%89/%E9%97%AE%E9%A2%98.png" alt="依赖需要重新下载"><br>在Ubuntu上可以很简单的解决这种依赖找不到的问题，参考<a href="https://blog.csdn.net/gyxx1998/article/details/118153079">CSDN:冰激凌啊</a>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install ros-melodic-ur-client-library<br></code></pre></td></tr></table></figure><p>但是在windows上我们只能用git 或者 chocolate，因此我到处找教程发现可以自行下载git包后用rosdep进行导入，参考<a href="https://github.com/gavanderhoorn/industrial_robot_status_controller">GitHub:gavanderhoorn&#x2F;industrial_robot_status_controller</a><br><img src="/2022/08/27/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%94%EF%BC%89/%E8%87%AA%E8%A1%8C%E4%B8%8B%E8%BD%BDgit%E5%8C%85.png" alt="自行下载git包.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; git -C catkin_ws/src <span class="hljs-built_in">clone</span> https://github.com/gavanderhoorn/industrial_robot_status_controller.git<br>&gt; <span class="hljs-comment">#如果不行就直接下载解压到src</span><br>&gt; rosdep update<br>&gt; rosdep install --from-paths src -i<br>&gt; <span class="hljs-built_in">cd</span> catkin_ws<br></code></pre></td></tr></table></figure><p>这样子Windows下的rosdep问题就可以解决了</p>]]></content>
    
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS学习记录】（四）关于“ROS中订阅subscribe 多个话题并汇聚回调信息处理”以及“UR5 接收关节信息”的学习记录</title>
    <link href="/2022/07/20/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2022/07/20/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ROS中订阅subscribe-多个话题并汇聚回调信息处理"><a href="#一、ROS中订阅subscribe-多个话题并汇聚回调信息处理" class="headerlink" title="一、ROS中订阅subscribe 多个话题并汇聚回调信息处理"></a>一、ROS中订阅subscribe 多个话题并汇聚回调信息处理</h2><blockquote><ul><li>在学习的过程中，我需要用到多个订阅内容集合到单个函数中进行处理的操作。</li><li>但是一般网络上的订阅方式是没有回调参数的，于是我走了很多歪路，例如</li></ul><ol><li>获取内存地址并用python中的ctypes，进行一个地址内容抽取，参考<a href="https://www.cnblogs.com/pfeiliu/p/12129187.html#:~:text=%E5%9C%A8python%E4%B8%AD%EF%BC%8C%E9%80%9A%E8%BF%87id%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%82%A3%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%91%A2%EF%BC%9F%20import%20ctypes%20value%20%3D%20%27hello%20world%27%20%23,%3D%20ctypes.cast%20%28address%2C%20ctypes.py_object%29.value%20%23%20%E8%AF%BB%E5%8F%96%E5%9C%B0%E5%9D%80%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%20print%20%28address%2Cget_value%29">《python通过内存地址获取数据》</a>），但是效果很差，估计是ROS本身封装的很严所以一般的抽取内存数据的方式不可用；</li><li>调取rospy.topics.Subscriber***函数里的方法，也是无法解决这个问题: <img src="/2022/07/20/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/Subscriber%E6%97%A0%E6%B3%95%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98.png" alt="Subscriber无法解决问题.png"><br>于是我开启了面向搜索引擎编程，发现这个两个教程<br>(1) <a href="https://blog.csdn.net/muyiyushan/article/details/118418040">利用message_filter进行多传感器时间同步</a><br>(2) <a href="https://blog.csdn.net/chishuideyu/article/details/77479758">ROS官方教程[翻译]—message_filter的使用</a></li></ol></blockquote><p>附上代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> message_filters<br><span class="hljs-comment">#---------------------订阅----------------------</span><br>sub1 = message_filters.Subscriber(<span class="hljs-string">&#x27;/topic1&#x27;</span> , msg) <br><span class="hljs-comment">#message_filters.Subscriber 跟rospy.Subscriber 一样需要传入的函数</span><br>sub2= message_filters.Subscriber(<span class="hljs-string">&#x27;/topic2&#x27;</span> , msg) <br><br><span class="hljs-comment">#---------------------集合-----------------------</span><br>ts = message_filters.TimeSynchronizer([sub1,sub2],<span class="hljs-number">1</span>)<br>ts.registerCallback( 要传入的函数 )<br><span class="hljs-comment">#---------------------END----------------------</span><br></code></pre></td></tr></table></figure><p>以上仅为使用模板topic 的选择还得看用户</p><h2 id="二、UR5-接收关节信息"><a href="#二、UR5-接收关节信息" class="headerlink" title="二、UR5 接收关节信息"></a>二、UR5 接收关节信息</h2><blockquote><p>在实验的过程中，我希望收集UR5机械臂的关节信息，但是当我把 订阅rospy.Subscriber() 函数放在执行UR5控制（运动）的函数前面时会出现无法进入下一个函数的情况，在查阅很多网络资料后发现<a href="https://www.daimajiaoliu.com/daima/56971f320bc6c00">未知作者操作UR5机械臂</a>一文中出现了一句话<img src="/2022/07/20/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/topic.png" alt="topic.png"><br>也就是说<strong>必须UR5机械臂有出现关节变化时该订阅才会生效</strong>，因此必须让机械臂动起来或者把订阅消息的程序放在机械臂控制运动的函数之后</p></blockquote><p>附上示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">rospy.Subscriber(<span class="hljs-string">&#x27;/joint_states&#x27;</span>,JointState,getUR5State)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUR5State</span>:<br>UR5state = state.position<br>    rospy.loginfo(UR5state)<br></code></pre></td></tr></table></figure><p>通过这一年的学习算是对强大的ROS系统有了浅薄的了解，但还有很多地方需要学习，例如 **”把所有的节点放到一个Lanuch里” 或者”做成一个Qt可视化界面”**，以及接入力传感器数据等等更多的挑战需要去面对</p>]]></content>
    
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS学习记录】（三）关于ROS控制真实UR5以及手柄(joystick)控制仿真UR5</title>
    <link href="/2022/05/08/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/05/08/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="关于ROS控制真实UR5以及手柄-joystick-控制仿真UR5学习进程"><a href="#关于ROS控制真实UR5以及手柄-joystick-控制仿真UR5学习进程" class="headerlink" title="关于ROS控制真实UR5以及手柄(joystick)控制仿真UR5学习进程"></a>关于ROS控制真实UR5以及手柄(joystick)控制仿真UR5学习进程</h2><h4 id="一、ROS控制真实UR5进程"><a href="#一、ROS控制真实UR5进程" class="headerlink" title="一、ROS控制真实UR5进程"></a>一、ROS控制真实UR5进程</h4><ol><li>UR5通过控制器同步实时状态可以实现但是无法进行movit!控制</li><li>因为版本迭代导致ur_morden_driver不可用，因此RAIN(<a href="https://github.com/inmo-jang/rain_teleoperation/blob/master/xbox_teleop.md">Inmo Jang</a>)的代码无法用要重新调试<br><img src="/2022/05/08/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89/%E9%97%AE%E9%A2%98.png" alt="问题"></li></ol><h4 id="二、手柄-joystick-控制仿真UR5学习进程"><a href="#二、手柄-joystick-控制仿真UR5学习进程" class="headerlink" title="二、手柄(joystick)控制仿真UR5学习进程"></a>二、手柄(joystick)控制仿真UR5学习进程</h4><ol><li>利用<a href="https://github.com/inmo-jang/rain_teleoperation/blob/master/xbox_teleop.md">Inmo Jang</a>的代码已经可以实现gazebo控制，但是gazebo里的UR5有时候还是会抽搐，可能是因为Joystick没有接替控制权</li><li>下一步是手柄控制UR5之后用Phantom控制！</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS学习记录】（二）</title>
    <link href="/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="【ROS】抓紧记录学习动态（二）"><a href="#【ROS】抓紧记录学习动态（二）" class="headerlink" title="【ROS】抓紧记录学习动态（二）"></a>【ROS】抓紧记录学习动态（二）</h1><blockquote><p>上回【ROS】（一）我已经可以通过Subscriber获取Sensor_msgs里publish的信息了，这回我直接想把<a href="https://github.com/sunghowoo/Control-of-two-UR5s-by-two-phantom-omnies-">sunghowoo</a>小哥的summer_gazebo给复现。其实模型方面是没问题的，但是在launch的时候老是有问题，我查了一下是<code>robot_state_publisher</code>没有接收到消息……</p></blockquote><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>在我把资源都放好以后，出现了这样的问题<img src="/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.png" alt="出现问题"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">.....<br>[ERROR] [xxx]:Error document empty.<br>[robot_state_publisher-5] process has died<br>.....<br></code></pre></td></tr></table></figure><p>很是苦恼，于是我上ROS_Wiki![rosnode_ping](rosnode ping.png)<br>搜了一下找到了这个<a href="http://wiki.ros.org/robot_state_publisher/Troubleshooting#:~:text=By%20default%20the%20robot%20state%20publisher%20looks%20for,and%20therefore%20does%20not%20have%20a%20root%20link.">robot_state_publisher&#x2F;Troubleshooting</a><br><img src="/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/TroubleShooting.png" alt="TroubleShooting"><br>我尝试了一下<code>$rosnode ping robot_state_publisher</code>因为这个process已经died了所以肯定是没有反应的<img src="/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/process_died.png" alt="process_died.png"><br>又尝试了一下<code>$rostopic hz joint_states</code>出现了<br><img src="/2022/03/07/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%BA%8C%EF%BC%89/joint_states%E5%87%BA%E7%8E%B0.png" alt="joint_states出现.png"><br>也就是说<code>joint_states</code>没有发布关节状态</p>]]></content>
    
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS学习记录】（一）</title>
    <link href="/2022/03/05/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/03/05/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="【ROS学习记录】（一）"><a href="#【ROS学习记录】（一）" class="headerlink" title="【ROS学习记录】（一）"></a>【ROS学习记录】（一）</h1><blockquote><p>由于github上开源的关于PhantomOmni-UR5的源代码在本电脑上复现出现不少问题，这么修也办法成功（主要是也想好好的学一下如何控制ROS系统），于是我决定从头开始，认真学习ROS系统框架<br>最近学习的主要是<br>如何使用ROS系统自带的Topic？<br>如何使用Publish和Subscriber？<br>如何使用Launch文件？<br>以及以上的一些小细节。</p></blockquote><h3 id="1-使用Subscriber获取Sensor-msgs中的JointState"><a href="#1-使用Subscriber获取Sensor-msgs中的JointState" class="headerlink" title="1. 使用Subscriber获取Sensor_msgs中的JointState"></a>1. 使用Subscriber获取Sensor_msgs中的JointState</h3><h2 id="在最近的学习中，我注意到源代码Omni-cpp中的Publisher和Subscirber之间要通信，必须遵循”-Topic-名称一致”规律-例如注意到这个节点的名称是”joint-states”则Subscriber的代码必须是接收”joint-states”编译好之后我们会看到”joit-states”发送message给stateSubscriber-！-值得注意的是-stateSubscriber节点必须在大的Geomagic这个Group下，不然会出现stateSubscriber被排斥在外的情况，就像下图！我暂时还不知道为什么会出现这种情况，但是可以知道的是只要把stateSubscriber这个节点放到launch里面跟joint-states同一个Group就好了，就像这样值得注意的是-pkg-quot-xxx-quot-就是之前在创建这个功能包的时候的名字-gt-这次学习让我更深地学到了如何创建节点去监听消息，对后续重新创建一个UR5模型特别有意义！"><a href="#在最近的学习中，我注意到源代码Omni-cpp中的Publisher和Subscirber之间要通信，必须遵循”-Topic-名称一致”规律-例如注意到这个节点的名称是”joint-states”则Subscriber的代码必须是接收”joint-states”编译好之后我们会看到”joit-states”发送message给stateSubscriber-！-值得注意的是-stateSubscriber节点必须在大的Geomagic这个Group下，不然会出现stateSubscriber被排斥在外的情况，就像下图！我暂时还不知道为什么会出现这种情况，但是可以知道的是只要把stateSubscriber这个节点放到launch里面跟joint-states同一个Group就好了，就像这样值得注意的是-pkg-quot-xxx-quot-就是之前在创建这个功能包的时候的名字-gt-这次学习让我更深地学到了如何创建节点去监听消息，对后续重新创建一个UR5模型特别有意义！" class="headerlink" title="在最近的学习中，我注意到源代码Omni.cpp中的Publisher和Subscirber之间要通信，必须遵循”(Topic)名称一致”规律.例如注意到这个节点的名称是”joint_states”则Subscriber的代码必须是接收”joint_states”编译好之后我们会看到”joit_states”发送message给stateSubscriber ！- 值得注意的是:stateSubscriber节点必须在大的Geomagic这个Group下，不然会出现stateSubscriber被排斥在外的情况，就像下图！我暂时还不知道为什么会出现这种情况，但是可以知道的是只要把stateSubscriber这个节点放到launch里面跟joint_states同一个Group就好了，就像这样值得注意的是 pkg = &quot;xxx&quot;就是之前在创建这个功能包的时候的名字&gt;这次学习让我更深地学到了如何创建节点去监听消息，对后续重新创建一个UR5模型特别有意义！"></a>在最近的学习中，我注意到源代码Omni.cpp中的Publisher和Subscirber之间要通信，必须遵循”(Topic)名称一致”规律.<br>例如<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">...<br><span class="hljs-comment">/*************发布者代码端******************/</span><br>ros::Publisher joint_states;<br>joint_topic &lt;&lt; <span class="hljs-string">&quot;joint_states&quot;</span>;<br>joint_pub = n.<span class="hljs-built_in">advertise</span>&lt;sensor_msgs::JointState&gt;(joint_topic.<span class="hljs-built_in">str</span>(), <span class="hljs-number">1</span>);<br>...<br></code></pre></td></tr></table></figure><br>注意到这个节点的名称是”joint_states”<br>则Subscriber的代码必须是接收”joint_states”<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">...<br><span class="hljs-comment">/****************订阅者代码端***********************/</span><br>ros::Subscriber stateSubscriber = n.<span class="hljs-built_in">subscribe</span>(<span class="hljs-string">&quot;joint_states&quot;</span>, <span class="hljs-number">1</span> ,stateCallback);<br><span class="hljs-comment">//这里stateCallback是一个注册的回调函数，负责处理接收到的信息</span><br>...<br></code></pre></td></tr></table></figure><br>编译好之后我们会看到”joit_states”发送message给stateSubscriber ！<br><img src="/2022/03/05/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%80%EF%BC%89/stateSubscriber.png" alt="正确的加入节点方式"><br>- <strong>值得注意的是:</strong><code>stateSubscriber</code>节点必须在大的<code>Geomagic</code>这个Group下，不然会出现<code>stateSubscriber</code>被排斥在外的情况，就像下图！<br><img src="/2022/03/05/%E3%80%90ROS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%80%EF%BC%89/stateSubscriber_2.png" alt="仅加入节点"><br>我暂时还不知道为什么会出现这种情况，但是可以知道的是只要把stateSubscriber这个节点放到launch里面跟joint_states同一个Group就好了，就像这样<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs launch">&lt;launch&gt;<br>&lt;arg name=&quot;device_name&quot; default = &quot;Geomagic1&quot;/&gt;<br>&lt;param name = &quot;publish_rate&quot; type=&quot;int&quot; value = &quot;100&quot;/&gt;<br>&lt;group ns=&quot;$(arg device_name)&quot;&gt;<br>&lt;node name = &quot;(arg device_name)&quot; pkg = &quot;geomagic_control&quot; type = &quot;omni&quot; output = &quot;screen&quot;&gt;<br>...<br>&lt;/node&gt;<br>&lt;node name =&quot;omniSubscriber&quot; pkg = &quot;omniSubscriber&quot; type = &quot;omniSubscriber&quot; output = &quot;screen&quot;&gt;<br>&lt;/node&gt;<br>&lt;/group&gt;<br>&lt;/launch&gt;<br></code></pre></td></tr></table></figure><br><strong>值得注意的是</strong> <code>pkg = &quot;xxx&quot;</code>就是之前在创建这个功能包的时候的名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">catkin_make &lt;pkg_name&gt; depend_1 depend_2 .......<br></code></pre></td></tr></table></figure><br>&gt;这次学习让我更深地学到了如何创建节点去监听消息，对后续重新创建一个UR5模型特别有意义！</h2>]]></content>
    
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
